Find at the end of this document a translation table between cadnano v2 
vocabulary and scadnano.

Fields:
    -"name": 
        Type
        ===========
            string 

        Description
        ===========
            Name of the design.
        
        Example
        =========== 
            "name": "Fri Jan 16 2009 12:58:19 GMT-0500"

    -"vstrands": 
        Type
        ===========
            Array of objects all sharing the same structure
            that we will call `Helix`

        Description
        ===========
            Each element of the array corresponds to an helix.

            The lattice type is computed in two different ways:
                - cadnano 2: model/io/legacydecoder.py:46-59
                - cadnano 2.5: cadnano/fileio/v2decode.py:37-44

            We will stick to how it is done in cadnano 2.5 as it is simpler.

            The rule is:

                if num_bases % 32 == 0:
                    lattice_type = LatticeEnum.SQUARE
                    grid_type = GridEnum.SQUARE
                elif num_bases % 21 == 0:
                    lattice_type = LatticeEnum.HONEYCOMB
                    grid_type = GridEnum.HONEYCOMB

            Where the number of bases `num_bases` is determined by looking at
            the first helix:

                num_bases = len(obj['vstrands'][0]['scaf'])

    -object of type `Helix` in the array vstrands:
        Type
        ===========
            Contains 10 mandatory fields:
                -"scaf": array of length `num_bases` (same length for all helices).
                         Each element of the array "scaf" is an array of 4 integers.
                -"stap": array of length `num_bases` (same  length for all helices).
                         Each element of the array "scaf" is an array of 4 integers.
                -"loop": array of integers of length `num_bases` (same length for all helices).
                -"stap_colors": array containing as many entry as staples, each entry is a 2-integer array.
                -"num": integer.
                -"col": interger.
                -"skip": array of integers in {0,-1} 
                         of length `num_bases` (same length for all helices).
                -"row": integer.

                -"scafLoop": array, empty?.
                -"stapLoop": array, empty?.

            Contains 2 optional fields which we ignore:
                -"oligos": seems to be designed to contain DNA sequence but
                    field is not touched by cadnano even when you specify a custom sequence on the GUI.
                    Bug?

                -"modifications": I assume it can be used to put fluophores and stuff.

            Note 1: 
                The two following fields seems not to be used by cadnano:
                
                -"scafLoop": array, empty?.
                -"stapLoop": array, empty?.

                Scaffold loops and staple loops are already taken into account 
                in the fields "scaf" and "stap".

            Note 2: 
                DNA sequences are not stored in the cadnano v2 files.

            Note 3: SQ100 files.
                If, for a disgn on the square grid, you have only 
                one column numbered 0, cadnano2 will ask you if your file is SQ100 or not.
                This only seems to impact the number of rows and cols which are displayed by the GUI.
                This is ignored if you open the file with cadnano 2.5.

                See model/io/legacydecoder.py:75-92

            Note 4: forward/backward issue.
                In cadnano 2, the convention is that helices with even number have the scaffold going forward and
                staples going backwards while helices with odd number do the opposite.

                It means that we cannot convert an arbitrary scadnano file to cadnano v2.
        
        Description
        ===========
            -"row", "col": 
                They increase in these directions:   ---->row
                                                    |
                                                    |
                                                    V
                                                   col

                When honeycomb lattice, a "row" is in fact a zigzag pattern:
                                     
                .   .   .             .   .
                  .   .   .   or    .   .   . 

                The first is used when the row is even and the second when the row is odd.
                
                However, a "column" is a set of vertically aligned helices,
                there are 3 columns in the following pattern:
                                          .
                                        .   .
                                        .   .
                                          .

                The numbering of the columns/rows is relative to the original grid
                on which the design was drawn, starting counting at 0. 

                In cadnano 2.5, that original numbering will be ignored when you load the file
                and your design will simply be centered around (0,0) (middle of the screen).

                In cadnano 2, your design will be placed using those absolute coordinates.

            -"num": the number of the helix.
                Even helices have the scaffold go forward and staples go backward.
                Odd helices have the scaffold go forward and staples go backward.

            -"scaf": the array is `num_bases` long, each element of the array is
                an array of four integers, named 
                [five_vh, five_idx, three_vh, three_idx] in the code.

                In my understanding, it reads as follows.

                If the base is empty (no strand) then: [-1,-1,-1,-1].

                A strand is abstracted as a collection of length 3 segments which overlap.
                Segment are orientated 5' -> 3'.
                Each segment reads "Go from helix `five_vh` at base `five_idx` to 
                helix `three_vh` at base `three_idx`".

                The base numbering starts at 0. 

                Scaffold Example:

                Helix0: ..#====||=========>
                        .......||..........
                Helix1: .......||..........
                        <======||=========#

                Legend:
                        . : empty base
                        # : 5' end
                        = : body of the strand
                        < : 3' end

                We have 19 bases per helix.
                The scaffold on `Helix 0` will be represented by:

                [-1,-1,-1,-1]
                [-1,-1,-1,-1]
                [-1,-1,0,3] <------- 5' end
                [0,2,0,4]
                [0,3,0,5]
                [0,4,0,6]
                [0,5,0,7]
                [0,6,1,7] <------- cross over
                [1,8,0,9] <------- cross over
                [0,8,0,10]
                ...
                [0,16,0,18]
                [0,17,-1,-1] <------- 3' end

                And on `Helix 1`:
                [1,1,-1,-1] <------- 3' end
                [1,2,1,0]
                [1,3,1,1]
                ...
                [1,7,1,5]
                [0,7,1,6] <------- cross over
                [1,9,0,8] <------- cross over
                [1,10,1,8]
                ....
                [1,18,1,16]
                [-1,-1,1,17] <------- 5' end

        -"stap": same format as "scaf".
            Beware that a staple can crossover on the same helix (like a barrel).
            There are such staples in the test file `v2.json`.

        -"loop": integer array of size `num_bases`.
            Each integer is the size of the loop added at that base.
            By default: 0

        -"skip": integer array of size `num_bases`,
            By default 0, meaning no skip. If there is a deletion then the 
            value for that base is set at -1.

        -"stap_colors": array of arrays of size two.
            There as many entries as staples of which 5' end is on the helix.
            Then it reads [base_id, color] where:
                - `base_id` is the number of the base where the 5' is
                - `color` an int representation of an hex color:
                    int to color hex: '#%0.6x' % (color_number)
                    color hex to int: int(hex, 16)


TRANSLATION TABLE
=================

cadnano v2    |   scadnano
==============|===========
loop          | insertion
skip          | deletion
N/A           | Loopout